version: 2
jobs:
  build:
    docker:
      # use circle ci container image, the same as target API
      - image: circleci/android:api-29

#    working_directory: ~/repo

    environment:
      # Customize the JVM maximum heap limit.
      JVM_OPTS: -Xmx3200m
      TERM: dumb

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
#TODO          key: jars-{{ checksum "build.gradle" }}-{{ checksum  "app/build.gradle" }}
          keys:
            - v1-dependencies-{{ checksum "build.gradle" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      # https://blog.danlew.net/2015/09/09/dont-use-dynamic-versions-for-your-dependencies/
      # androidDependencies vs dependencies vs buildscriptDependencies
      - run:
          name: Download Dependencies
          command: ./gradlew dependencies

      - save_cache:
          paths:
            - ~/.gradle
          key: v1-dependencies-{{ checksum "build.gradle" }}
          #          paths:
          #            - ~/.gradle
          #          key: jars-{{ checksum "build.gradle" }}-{{ checksum  "app/build.gradle" }}

      # run tests!
      - run:
          name: Run Tests
          command: ./gradlew lint test
      - store_artifacts: # for display in Artifacts: https://circleci.com/docs/2.0/artifacts/
          path: app/build/reports
          destination: reports
      - store_test_results: # for display in Test Summary: https://circleci.com/docs/2.0/collect-test-data/
          path: app/build/test-results
      # See https://circleci.com/docs/2.0/deployment-integrations/ for deploy examples



#      - run:
#          name: Build debug APK and release APK
#          command: |
#              ./gradlew :app:assembleDebug
#              ./gradlew :app:assembleDebugAndroidTest
#      - run:
#          name: Store Google Service Account
#          command: echo $GCLOUD_SERVICE_KEY > ${HOME}/gcloud-service-key.json
#      - run:
#          name: Authorize gcloud and set config defaults
#          command: |
#            sudo gcloud auth activate-service-account --key-file=${HOME}/gcloud-service-key.json
#            sudo gcloud --quiet config set project ${GOOGLE_PROJECT_ID}
#      - run:
#          name: Test with Firebase Test Lab
#          command: >
#            sudo gcloud firebase test android run \
#              --app <local_server_path>/<app_apk>.apk \
#              --test <local_server_path>/<app_test_apk>.apk \
#              --results-bucket cloud-test-${GOOGLE_PROJECT_ID}
#      - run:
#          name: Install gsutil dependency and copy test results data
#          command: |
#            sudo pip install -U crcmod
#            sudo gsutil -m cp -r -U `sudo gsutil ls gs://[BUCKET_NAME]/[OBJECT_NAME] | tail -1` ${CIRCLE_ARTIFACTS}/ | true