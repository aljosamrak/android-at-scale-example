version=0.1.0

# Project-wide Gradle settings.
# IDE (e.g. Android Studio) users:
# Gradle settings configured through the IDE *will override*
# any settings specified in this file.
# For more details on how to configure your build environment visit
# http://www.gradle.org/docs/current/userguide/build_environment.html
# Specifies the JVM arguments used for the daemon process.
# The setting is particularly useful for tweaking memory settings.
org.gradle.jvmargs=-Xmx2048m

# The Gradle Daemon is enabled by default, and we recommend always enabling it
# Note that having the Daemon enabled, all your builds will take advantage of the speed boost,
# regardless of the version of Gradle a particular build uses.
# Since Gradle 3.0, we enable Daemon by default and recommend using it for both developers'
# machines and Continuous Integration servers. However, if you suspect that Daemon makes your
# CI builds unstable, you can disable it to use a fresh runtime for each build since the runtime
# is completely isolated from any previous builds.
# https://docs.gradle.org/current/userguide/gradle_daemon.html
org.gradle.daemon=true

# By default, the build cache is not enabled.
# Gradle will try to reuse outputs from previous builds for all builds
# When the build cache is enabled, it will store build outputs in the Gradle user home.
# https://docs.gradle.org/current/userguide/build_cache.html#build_cache
org.gradle.caching=true

# Enables incubating configuration on demand, where Gradle will attempt to configure only necessary projects.
# The Configuration injection feature and access to the complete project model are possible because
# every project is configured before the execution phase. Yet, this approach may not be the most
# efficient in a very large multi-project build. There are Gradle builds with a hierarchy of hundreds
# of subprojects. The configuration time of huge multi-project builds may become noticeable.
# https://docs.gradle.org/current/userguide/multi_project_builds.html#sec:configuration_on_demand
org.gradle.configureondemand=(true,false)

# You could see big improvements in build times as soon as you enable parallel builds.
# Parallel builds require projects to be decoupled at execution time, i.e. tasks in different projects
# must not modify shared state. Read more about that topic in the User Manual. Also be aware that
# Gradle versions before 4.0 could run clean and build tasks in parallel, resulting in failures.
# On these older versions it is best to call clean separately.
# https://guides.gradle.org/performance/#parallel_execution
org.gradle.parallel=true

# When configured, Gradle will run in incubating parallel mode.
# This option should only be used with decoupled projects. More details, visit
# http://www.gradle.org/docs/current/userguide/multi_project_builds.html#sec:decoupled_projects
# org.gradle.parallel=true
# AndroidX package structure to make it clearer which packages are bundled with the
# Android operating system, and which are packaged with your app's APK
# https://developer.android.com/topic/libraries/support-library/androidx-rn
android.useAndroidX=true
# Automatically convert third-party libraries to use AndroidX
android.enableJetifier=true
# Kotlin code style for this project: "official" or "obsolete":
kotlin.code.style=official

# This enables an experimental Android Gradle Plugin feature to pull benchmark reports from devices running API 16 and higher.
android.enableAdditionalTestOutput=true

# Orchid configuration propertiees
orchidUrl=https://aljosamrak.github.io/android-at-scale-example/